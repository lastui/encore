#[derive(Debug, Clone, PartialEq)]
pub enum TokenType {
    // Characters
    LeftParen,
    RightParen,
    LeftBrace,
    RightBrace,
    LeftBracket,
    RightBracket,
    Comma,
    Dot,
    Semicolon,
    Colon,
    Question,
    Arrow,
    Hash,
    Plus,
    PlusPlus,
    PlusEqual,
    Minus,
    MinusMinus,
    MinusEqual,
    Star,
    StarStar,
    StarEqual,
    StarStarEqual,
    Slash,
    SlashEqual,
    Percent,
    PercentEqual,
    Equal,
    EqualEqual,
    EqualEqualEqual,
    Bang,
    BangEqual,
    BangEqualEqual,
    Greater,
    GreaterEqual,
    GreaterGreater,
    GreaterGreaterEqual,
    GreaterGreaterGreater,
    GreaterGreaterGreaterEqual,
    Less,
    LessEqual,
    LessLess,
    LessLessEqual,
    Ampersand,
    AmpersandEqual,
    AmpersandAmpersand,
    AmpersandAmpersandEqual,
    Pipe,
    PipeEqual,
    PipePipe,
    PipePipeEqual,
    Caret,
    CaretEqual,
    Tilde,
    Ellipsis,
    QuestionQuestion,
    QuestionQuestionEqual,
    QuestionDot,
    // Literals
    Identifier(String),
    StringLiteral(String),
    TemplateLiteral(Vec<TemplatePart>),
    NumberLiteral(f64),
    BigIntLiteral(String),
    RegExpLiteral(String, String),
    True, False, Null, Undefined,
    // Keywords
    Var,
    Let,
    With,
    Const,
    Function,
    Return,
    If,
    Else,
    While,
    For,
    Break,
    Continue,
    This,
    Super,
    New,
    Delete,
    Typeof,
    Void,
    In,
    InstanceOf,
    Try,
    Catch,
    Finally,
    Throw,
    Switch,
    Case,
    Default,
    Await,
    Async,
    Do,
    Enum,
    Of,
    Target,
    Implements,
    Interface,
    Package,
    Private,
    Protected,
    Public,
    Arguments,
    Eval,
    Debugger,
    Class,
    Extends,
    Constructor,
    Static,
    Get,
    Set,
    Yield,
    Import,
    Export,
    From,
    As,
    // Sentinel
    EOF,
}

#[derive(Debug, Clone, PartialEq)]
pub enum TemplatePart {
    String(String),
    Expression(String),
}

#[derive(Debug, Clone)]
pub struct Token {
    pub token_type: TokenType,
    pub column: usize,
    pub line: usize,
    pub length: usize,
}

impl Token {
    
    #[inline]
    pub fn new(token_type: TokenType, line: usize, column: usize, length: usize) -> Self {
        Token { token_type, line, column, length }
    }
}
